[{"/media/nkusikevin/KEVINHART/Web Projects/Unfinished projects/nkmovies/moviewebapp/src/reportWebVitals.js":"1","/media/nkusikevin/KEVINHART/Web Projects/Unfinished projects/nkmovies/moviewebapp/src/Row.js":"2"},{"size":362,"mtime":1607336542179,"results":"3","hashOfConfig":"4"},{"size":2177,"mtime":1607724495613,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uswhxl",{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/media/nkusikevin/KEVINHART/Web Projects/Unfinished projects/nkmovies/moviewebapp/src/reportWebVitals.js",[],"/media/nkusikevin/KEVINHART/Web Projects/Unfinished projects/nkmovies/moviewebapp/src/Row.js",["11","12"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\nconst base_url = \"https://images.tmdb.org/t/p/original/\";\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailer] = useState(\"\");\r\n  useEffect(() => {\r\n    //this useEffecct will be trigered each time we make requist on database\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      //  console.log(request);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n  console.log(movies);\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    },\r\n  };\r\n  const handleclick = (movie) => {\r\n    console.log(movie);\r\n    if (trailerUrl != \"\") {\r\n      setTrailer(\"\");\r\n    } else {\r\n      movieTrailer(movie)\r\n        //   movieTrailer(movie?.orginal_name || \"\")\r\n        .then((url) => {\r\n          //   console.log(movie.original_name);\r\n          const urlparams = new URLSearchParams(new URL(url).search);\r\n          setTrailer(urlparams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"row\">\r\n      <h1>{title}</h1>\r\n      <div className=\"row_posters\">\r\n        {/* movies poster */}\r\n        {movies.map((movie) => (\r\n          <img\r\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"} `}\r\n            onClick={() =>\r\n              handleclick(movie.name || movie.title || movie.orginal_name)\r\n            }\r\n            key={movie.id}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.original_name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl != \"\" && <YouTube videoId={trailerUrl} opts={opts} />}\r\n      {/* {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />} */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n",{"ruleId":"13","severity":1,"message":"14","line":31,"column":20,"nodeType":"15","messageId":"16","endLine":31,"endColumn":22},{"ruleId":"13","severity":1,"message":"14","line":63,"column":19,"nodeType":"15","messageId":"16","endLine":63,"endColumn":21},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected"]